package greet

import (
	"context"
	"fmt"
	"log"

	"connectrpc.com/connect"
	greetv1 "github.com/harrisoncramer/grpc-connect-http/apis/gen/greet/v1" // generated by protoc-gen-go
)

type HttpService struct{}

func (s *HttpService) Hello(
	ctx context.Context,
	req *connect.Request[greetv1.HelloRequest],
) (*connect.Response[greetv1.HelloResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&greetv1.HelloResponse{
		Greeting: fmt.Sprintf("Hello from HTTP, %s!", req.Msg.Name),
	})
	res.Header().Set("Greet-Version", "v1")
	return res, nil
}

func NewHttpGreetService() *HttpService {
	return &HttpService{}
}

type GrpcService struct {
	greetv1.UnimplementedGreetServiceServer
}

func (s GrpcService) Hello(ctx context.Context, req *greetv1.HelloRequest) (*greetv1.HelloResponse, error) {
	return &greetv1.HelloResponse{
		Greeting: fmt.Sprintf("Hello from gRPC, %s!", req.Name),
	}, nil
}

func NewGrpcService() *GrpcService {
	return &GrpcService{}
}
