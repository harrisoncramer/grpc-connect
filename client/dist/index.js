import { createClient } from "@connectrpc/connect";
import { GreetService, HelloRequestSchema } from "./gen/greet/v1/greet_pb.js";
import { MathService } from "./gen/math/v1/math_pb.js";
import { createConnectTransport } from "@connectrpc/connect-web";
import { create } from "@bufbuild/protobuf";
// We can create a parent client with as many of the services attached as we want
// In this case, we have both the math service and the greet service
class ConnectClient {
    constructor() {
        const transport = createConnectTransport({
            baseUrl: "http://localhost:8084",
        });
        const greetClient = createClient(GreetService, transport);
        const mathClient = createClient(MathService, transport);
        this.greet = greetClient;
        this.math = mathClient;
    }
}
const client = new ConnectClient();
async function run() {
    await sayHello();
    await addNumbers();
}
run();
// We get type safety and autocompletion in all of our APIs without having to write
// any serialization logic or deserialization logic at all. All we have to do is import
// the generated code and we can directly connect to our connect-enabled gRPC services.
async function sayHello() {
    const user = create(HelloRequestSchema, { name: "Harry" });
    try {
        const res = await client.greet.hello(user, {});
        console.log(`Greeting was: ${res.greeting}`);
    }
    catch (error) {
        console.error("Request to greet service failed:", error);
    }
}
// In the case that we haven't yet implemented an API, that's okay -- we can still
// import and use the types generated by the compiler. This lets the backend and frontend
// teams work in parallel even if the APIs aren't implemented yet!
async function addNumbers() {
    console.warn("\nRequest to math service will fail!\nWe have not implemented the HTTP service.\nThe types can still be used to build the APIs, though.\n\n");
    try {
        await client.math.add({ first: 12, second: 30 });
    }
    catch (error) {
        const e = error;
        console.error(`Response with GRPC code: ${e.code}`);
        console.error(`Response: ${e.stack}`);
    }
}
